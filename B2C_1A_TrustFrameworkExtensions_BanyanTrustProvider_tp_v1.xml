<TrustFrameworkPolicy
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" 
PolicySchemaVersion="0.3.0.0" TenantId="{tenantname}.onmicrosoft.com" 
PolicyId="{policyid}" 
PublicPolicyUri="http://{tenantname}.onmicrosoft.com/{policyid}" TenantObjectId="4f4e7f3c-0280-4e30-8319-8e296d187f69">
    <BasePolicy>
        <TenantId>{tenantname}.onmicrosoft.com</TenantId>
        <PolicyId>{basepolicyid}</PolicyId>
    </BasePolicy>
    <BuildingBlocks>
        <ClaimsSchema>
            <ClaimType Id="logonIdentifier">
                <DisplayName>User name or email address that the user can use to sign in</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="password">
                <DisplayName>Password</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="grant_type">
                <DisplayName>grant_type</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="scope">
                <DisplayName>scope</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="nca">
                <DisplayName>nca</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="client_id">
                <DisplayName>client_id</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="resource_id">
                <DisplayName>resource_id</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="resource">
                <DisplayName>The resource parameter passes to the ROPC endpoint</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="refreshTokenIssuedOnDateTime">
                <DisplayName>An internal parameter used to determine whether the user should be permitted to authenticate again using their existing refresh token.</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="refreshTokensValidFromDateTime">
                <DisplayName>An internal parameter used to determine whether the user should be permitted to authenticate again using their existing refresh token.</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
        </ClaimsSchema>
        <ClaimsTransformations>
            <ClaimsTransformation Id="CreateSubjectClaimFromObjectID" TransformationMethod="CreateStringClaim">
                <InputParameters>
                    <InputParameter Id="value" DataType="string" Value="Not supported currently. Use oid claim." />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="sub" TransformationClaimType="createdClaim" />
                </OutputClaims>
            </ClaimsTransformation>
            <ClaimsTransformation Id="AssertRefreshTokenIssuedLaterThanValidFromDate" TransformationMethod="AssertDateTimeIsGreaterThan">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="refreshTokenIssuedOnDateTime" TransformationClaimType="leftOperand" />
                    <InputClaim ClaimTypeReferenceId="refreshTokensValidFromDateTime" TransformationClaimType="rightOperand" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="AssertIfEqualTo" DataType="boolean" Value="false" />
                    <InputParameter Id="AssertIfRightOperandIsNotPresent" DataType="boolean" Value="true" />
                </InputParameters>
            </ClaimsTransformation>
        </ClaimsTransformations>
    </BuildingBlocks>
    <ClaimsProviders>
        <ClaimsProvider>
            <Domain>banyan.com</Domain>
            <DisplayName>Banyan TrustProvider</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="ResourceOwnerPasswordCredentials-OAUTH2">
                    <DisplayName>Local Account SignIn</DisplayName>
                    <Protocol Name="OpenIdConnect" />
                    <Metadata>
                        <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">We can't seem to find your account</Item>
                        <Item Key="UserMessageIfInvalidPassword">Your password is incorrect</Item>
                        <Item Key="UserMessageIfOldPasswordUsed">Looks like you used an old password</Item>
                        <Item Key="DiscoverMetadataByTokenIssuer">true</Item>
                        <Item Key="ValidTokenIssuerPrefixes">https://sts.windows.net/</Item>
                        <Item Key="METADATA">https://login.microsoftonline.com/{tenantid}/.well-known/openid-configuration</Item>
                        <Item Key="authorization_endpoint">https://login.microsoftonline.com/{tenantid}/oauth2/token</Item>
                        <Item Key="response_types">id_token</Item>
                        <Item Key="response_mode">query</Item>
                        <Item Key="scope">email openid</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="logonIdentifier" PartnerClaimType="username" Required="true" DefaultValue="{OIDC:Username}"/>
                        <InputClaim ClaimTypeReferenceId="password" Required="true" DefaultValue="{OIDC:Password}" />
                        <InputClaim ClaimTypeReferenceId="grant_type" DefaultValue="password" />
                        <InputClaim ClaimTypeReferenceId="scope" DefaultValue="openid" />
                        <InputClaim ClaimTypeReferenceId="nca" PartnerClaimType="nca" DefaultValue="1" />
                        <InputClaim ClaimTypeReferenceId="client_id" DefaultValue="00000000-0000-0000-0000-000000000000" />
                        <InputClaim ClaimTypeReferenceId="resource_id" PartnerClaimType="resource" DefaultValue="00000000-0000-0000-0000-000000000000" />
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="oid" />
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="upn" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>
        <!-- SAML Example -->
        <ClaimsProvider>
            <DisplayName>Token Issuer</DisplayName>
            <TechnicalProfiles>
                <!-- SAML Token Issuer technical profile -->
                <TechnicalProfile Id="Saml2AssertionIssuer">
                    <DisplayName>SAML Token Issuer</DisplayName>
                    <Protocol Name="SAML2" />
                    <OutputTokenFormat>SAML2</OutputTokenFormat>
                    <Metadata>
                        <!-- The issuer contains the policy name; it should be the same name as configured in the relying party application. B2C_1A_signup_signin_SAML is used below. -->
                        <Item Key="IssuerUri">https://{tenantname}.b2clogin.com/{tenantname}.onmicrosoft.com/{basepolicyid}</Item>
                        <Item Key="XmlSignatureAlgorithm">Sha256</Item>
                        <Item Key="IncludeAuthnContextClassReferences">urn:oasis:names:tc:SAML:2.0:ac:classes:Password,urn:oasis:names:tc:SAML:2.0:ac:classes:Password,urn:oasis:names:tc:SAML:2.0:ac:classes:Password,urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</Item>
                        <!-- <Item Key="NameIDFormat">urn:oasis:names:tc:SAML:2.0:nameid-format:transient</Item> -->
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="MetadataSigning" StorageReferenceId="{metadatacertificate}" />
                        <Key Id="SamlAssertionSigning" StorageReferenceId="{metadatacertificate}" />
                        <Key Id="SamlMessageSigning" StorageReferenceId="{metadatacertificate}" />
                    </CryptographicKeys>
                    <InputClaims />
                    <OutputClaims />
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-Saml-issuer" />
                </TechnicalProfile>
                <!-- Session management technical profile for SAML based tokens -->
                <TechnicalProfile Id="SM-Saml-issuer">
                    <DisplayName>Session Management Provider</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.SamlSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>
    </ClaimsProviders>
    <UserJourneys>
        <UserJourney Id="ResourceOwnerPasswordCredentials">
            <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
            <OrchestrationSteps>
                <OrchestrationStep Order="1" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="ResourceOwnerFlow" TechnicalProfileReferenceId="ResourceOwnerPasswordCredentials-OAUTH2" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="3" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Saml2AssertionIssuer" />
            </OrchestrationSteps>
        </UserJourney>
        <UserJourney Id="SignInBanyanTrustProvider">
            <OrchestrationSteps>
                <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
                    <ClaimsProviderSelections>
                        <ClaimsProviderSelection TargetClaimsExchangeId="TrustProviderExchange" />
                    </ClaimsProviderSelections>
                </OrchestrationStep>
                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="TrustProviderExchange" TechnicalProfileReferenceId="ResourceOwnerPasswordCredentials-OAUTH2" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <!-- For social IDP authentication, attempt to find the user account in the directory. -->
                <OrchestrationStep Order="3" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId).  -->
                <OrchestrationStep Order="4" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect 
             from the user. So, in that case, create the user in the directory if one does not already exist 
             (verified using objectId which would be set from the last step if account was created in the directory. -->
                <OrchestrationStep Order="5" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Saml2AssertionIssuer" />
            </OrchestrationSteps>
            <ClientDefinition ReferenceId="DefaultWeb" />
        </UserJourney>
    </UserJourneys>
</TrustFrameworkPolicy>